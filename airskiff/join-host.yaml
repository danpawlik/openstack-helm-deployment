---
- name: Create servers
  hosts: localhost
  gather_facts: False
  vars:
    flavor: b2-30
    image: "Ubuntu 16.04"
    key_name: ansible_key
    net_name: Ext-Net
  tags:
    - create_servers
  tasks:
    - name: Set OS configuration as fact
      set_fact:
        flavor: "{{ flavor }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        net_name: "{{ net_name }}"
    - name: "Spawning airskiff node"
      os_server:
        state: present
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        timeout: 200
        flavor: "{{ flavor }}"
        nics:
          - net-name: "{{ net_name }}"
        name: "{{ item }}"
      register: airskiff_result
      with_items:
        - "airskiff-minion"

    - name: test
      debug:
        var: airskiff_result

    - name: Add airskiff into local inventory
      add_host:
        name: "{{ airskiff_result.results[0].openstack.public_v4  }}"
        hostname: "{{ airskiff_result.results[0].openstack.name }}"
        group: airskiff

    - name: wait for instances k8s_contr to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ item }}"
      with_items: "{{ groups['airskiff'] }}"
      run_once: true

    - name: Add airskiff host key to known_hosts
      shell: ssh-keyscan -H "{{ item }}" >> /home/ubuntu/.ssh/known_hosts
      with_items: "{{ groups['airskiff'] }}"
      args:
        executable: /bin/bash
      run_once: True


- name: Deploy
  hosts:
    - airskiff
  gather_facts: False
  vars:
    ansible_host_key_checking: false
    ansible_ssh_private_key_file: /home/ubuntu/.ssh/id_rsa_ansible
    setup_minikube: false
  tags:
    - deploy
  tasks:
    - name: "Copy upgrade script"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/upgrade-host.sh
        dest: /home/ubuntu/scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu

    - name: "Change sudoers"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/change-sudoers.sh
        dest: /home/ubuntu/scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu

    - name: "Copy join script"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/join-node.sh
        dest: /home/ubuntu/scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu

    - name: check if sudoers is correct
      sudo: yes
      sudo_user: root
      shell: /bin/grep -q 'ubuntu' /etc/sudoers
      register: sudoers_result
      ignore_errors: true

    - when: sudoers_result.rc == 1
      sudo: yes
      sudo_user: root
      shell: /home/ubuntu/scripts/change-sudoers.sh
      register: ubuntu_sudoers
      ignore_errors: true

    - name: remove nano
      sudo: yes
      sudo_user: ubuntu
      shell: /usr/bin/sudo /usr/bin/apt remove -y nano
      ignore_errors: true

    - name: Upgrade host
      sudo: yes
      sudo_user: ubuntu
      shell: |
        /bin/bash /home/ubuntu/scripts/upgrade-host.sh >> /home/ubuntu/logs
      register: upgrade_status
      ignore_errors: yes
      run_once: True

    - name: install other packages
      sudo: yes
      sudo_user: ubuntu
      shell: /usr/bin/sudo /usr/bin/apt install -y vim htop ccze
      ignore_errors: true

    - name: Run join script
      sudo: yes
      sudo_user: ubuntu
      shell: |
        /bin/bash /home/ubuntu/scripts/join-node.sh >> /home/ubuntu/logs
      register: join_status
      ignore_errors: false
      run_once: True
