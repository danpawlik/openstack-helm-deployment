---
- name: Create servers
  hosts: localhost
  gather_facts: False
  vars:
    flavor: b2-60
    image: "Ubuntu 16.04"
    key_name: ansible_key
    net_name: Ext-Net
  tags:
    - create_servers
  tasks:
    - name: Set OS configuration as fact
      set_fact:
        flavor: "{{ flavor }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        net_name: "{{ net_name }}"
    - name: "Spawning airship node"
      os_server:
        state: present
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        timeout: 200
        flavor: "{{ flavor }}"
        nics:
          - net-name: "{{ net_name }}"
        name: "{{ item }}"
      register: airship_result
      with_items:
        - "airship-test"

    - name: test
      debug:
        var: airship_result

    - name: Add airship into local inventory
      add_host:
        name: "{{ airship_result.results[0].openstack.public_v4  }}"
        hostname: "{{ airship_result.results[0].openstack.name }}"
        group: airship

    - name: wait for instances k8s_contr to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ item }}"
      with_items: "{{ groups['airship'] }}"
      run_once: true

    - name: Add airship host key to known_hosts
      shell: ssh-keyscan -H "{{ item }}" >> /home/ubuntu/.ssh/known_hosts
      with_items: "{{ groups['airship'] }}"
      args:
        executable: /bin/bash
      run_once: True


- name: Deploy
  hosts:
    - airship
  gather_facts: False
  vars:
    ansible_host_key_checking: false
    ansible_ssh_private_key_file: /home/ubuntu/.ssh/id_rsa_ansible
  tags:
    - deploy
  vars:
    site_name: mySite
    domain_name: atlantafoundry.com
  tasks:
    - name: "Copy upgrade script"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/upgrade-host.sh
        dest: /home/ubuntu/
        mode: 0755
        group: ubuntu
        owner: ubuntu

    - name: "Change sudoers"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/airship/change-sudoers.sh
        dest: /home/ubuntu/
        mode: 0755
        group: ubuntu
        owner: ubuntu

    - name: check if sudoers is correct
      sudo: yes
      sudo_user: root
      shell: /bin/grep -q 'ubuntu' /etc/sudoers
      register: sudoers_result
      ignore_errors: true

    - when: sudoers_result.rc == 1
      sudo: yes
      sudo_user: ubuntu
      shell: sudo bash /home/ubuntu/change-sudoers.sh
      register: ubuntu_sudoers
      ignore_errors: true

    - name: Upgrade host
      sudo: yes
      sudo_user: ubuntu
      shell: bash /home/ubuntu/upgrade-host.sh | tee -a /home/ubuntu/logs
      register: upgrade_status
      ignore_errors: yes
      run_once: True

    - name: remove nano
      sudo: yes
      sudo_user: ubuntu
      shell: sudo apt remove -y nano | tee -a /home/ubuntu/logs
      ignore_errors: true

    - name: install other packages
      sudo: yes
      sudo_user: ubuntu
      shell: sudo apt install -y vim htop ccze | tee -a /home/ubuntu/logs
      ignore_errors: true

    - name: set chown to ubuntu
      shell: sudo chown -R ubuntu:ubuntu /opt
      ignore_errors: true


      # clone openstack helm infra

    - name: Clone OSH infra
      sudo: yes
      sudo_user: ubuntu
      shell: git clone https://github.com/openstack/openstack-helm-infra /opt/openstack-helm-infra | tee -a /home/ubuntu/logs
      ignore_errors: false

      # install kubernetes
    - name: Copy Kubernetes install script
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/install-kubernetes.sh
        dest: /home/ubuntu/
        mode: 0755
        group: ubuntu
        owner: ubuntu

    - name: Execute Kubernetes script
      shell: |
        bash -x /home/ubuntu/install-kubernetes.sh | tee -a /home/ubuntu/logs
      ignore_errors: true

    # set proper labels for Airship and OSH
    - name: Set node labels
      shell: |
        /usr/bin/kubectl label nodes --all openstack-control-plane=enabled
        /usr/bin/kubectl label nodes --all openstack-compute-node=enabled
        /usr/bin/kubectl label nodes --all openvswitch=enabled
        /usr/bin/kubectl label nodes --all linuxbridge=enabled
        /usr/bin/kubectl label nodes --all ceph-mon=enabled
        /usr/bin/kubectl label nodes --all ceph-osd=enabled
        /usr/bin/kubectl label nodes --all ceph-mds=enabled
        /usr/bin/kubectl label nodes --all ceph-rgw=enabled
        /usr/bin/kubectl label nodes --all ceph-mgr=enabled

    # set propet DNS, if not set, later you will have problem with cep
    - name: set proper resolv.conf file
      shell: |
        echo "search svc.cluster.local cluster.local" | sudo tee /etc/resolv.conf
        echo "nameserver 10.96.0.10" | sudo tee -a /etc/resolv.conf
        echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
        echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
      ignore_errors: false

    - name: add bash completion
      shell: |
        echo "source <(kubectl completion bash)" >> /home/ubuntu/.bashrc
        echo "alias k=kubectl" >> /home/ubuntu/.bashrc
        echo "complete -F __start_kubectl k" >> /home/ubuntu/.bashrc
      ignore_errors: yes
      run_once: true

    - name: Install 010-armada-host-setup.sh
      sudo: yes
      sudo_user: ubuntu
      shell: |
        cd /opt/openstack-helm-infra
        bash -x ./tools/deployment/armada/010-armada-host-setup.sh | tee -a /home/ubuntu/logs
      ignore_errors: false

      # workaround for new pip
    - name: Install PyYAML
      sudo: yes
      sudo_user: ubuntu
      shell: |
        sudo -H pip3 install --ignore-installed PyYAML | tee -a /home/ubuntu/logs
      #####

    - name: Install 015-armada-build.sh
      sudo: yes
      sudo_user: ubuntu
      shell: |
        cd /opt/openstack-helm-infra
        bash -x ./tools/deployment/armada/015-armada-build.sh | tee -a /home/ubuntu/logs
      ignore_errors: false

    - name: Install 020-armada-render-manifests.sh
      sudo: yes
      sudo_user: ubuntu
      shell: |
        cd /opt/openstack-helm-infra
        bash -x ./tools/deployment/armada/020-armada-render-manifests.sh | tee -a /home/ubuntu/logs
      ignore_errors: false

    - name: Install 025-armada-validate-manifests.sh
      sudo: yes
      sudo_user: ubuntu
      shell: |
        cd /opt/openstack-helm-infra
        bash -x ./tools/deployment/armada/025-armada-validate-manifests.sh | tee -a /home/ubuntu/logs
      ignore_errors: false

    # workaound for 1 node deploy
    - name: change OSD cluster size
      shell: |
        sed -i 's/\sosd: [0-9]/ osd: 1/g' /opt/openstack-helm-infra/tools/deployment/armada/manifests/armada-ceph.yaml
      ignore_errors: true

    - name: Install 030-armada-apply-manifests.sh
      sudo: yes
      sudo_user: ubuntu
      shell: |
        cd /opt/openstack-helm-infra
        bash -x ./tools/deployment/armada/030-armada-apply-manifests.sh | tee -a /home/ubuntu/logs
      ignore_errors: false

    - name: Install 035-armada-update-uuids.sh
      sudo: yes
      sudo_user: ubuntu
      shell: |
        cd /opt/openstack-helm-infra
        bash -x ./tools/deployment/armada/035-armada-update-uuids.sh | tee -a /home/ubuntu/logs
      ignore_errors: false

    - name: Install 040-armada-update-passwords.sh
      sudo: yes
      sudo_user: ubuntu
      shell: |
        cd /opt/openstack-helm-infra
        bash -x ./tools/deployment/armada/040-armada-update-passwords.sh | tee -a /home/ubuntu/logs
      ignore_errors: false
