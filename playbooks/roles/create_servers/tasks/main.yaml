---
- name: Add ssh key if not present
  hosts: localhost
  serial:
    - "100%"
  remote_user: ubuntu
  gather_facts: False
  tags:
    - add_ansible_key
  tasks:
    - name: Generate SSH key used by ansible
      user:
        name: ubuntu
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: ".ssh/id_rsa_ansible"
      delegate_to: localhost
      run_once: True
      register: ssh_keygen_result

    - name: Check if keypair exists
      shell: |
        openstack --os-region-name "{{ lookup('env', 'OS_REGION_NAME') }}" \
                  --os-auth-url  "{{ lookup('env', 'OS_AUTH_URL') }}" \
                  --os-username "{{ lookup('env', 'OS_USERNAME') }}" \
                  --os-password "{{ lookup('env', 'OS_PASSWORD') }}" \
                  --os-project-name "{{ lookup('env', 'OS_TENANT_NAME') }}" \
                  --os-domain-name "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}" \
                  --os-project-domain-name "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}" \
                  keypair show ansible_key > /dev/null
      register: keypair_result
      ignore_errors: true

    # NOTE: I use shell because os_keypair raise error when auth is provided
    - when: keypair_result.rc == 1
      name: Add keypair
      command: |
        openstack --os-region-name "{{ lookup('env', 'OS_REGION_NAME') }}" \
                  --os-auth-url  "{{ lookup('env', 'OS_AUTH_URL') }}" \
                  --os-username "{{ lookup('env', 'OS_USERNAME') }}" \
                  --os-password "{{ lookup('env', 'OS_PASSWORD') }}" \
                  --os-project-name "{{ lookup('env', 'OS_TENANT_NAME') }}" \
                  --os-domain-name "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}" \
                  --os-project-domain-name "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}" \
                  keypair create ansible_key \
                  --public-key ".ssh/id_rsa_ansible.pub"

# os_server module spawns vm and get if vm was spawned earlier, thats
# why os_server_facts module is not required to use.
- name: Create servers
  hosts: localhost
  gather_facts: False
  tags:
    - create_servers
  tasks:
    - name: "Spawning k8s_contr node"
      os_server:
        state: present
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        image: "{{ contr_image }}"
        key_name: "{{ contr_key_name }}"
        timeout: 200
        flavor: "{{ contr_flavor }}"
        nics:
          - net-name: "{{ contr_net_name }}"
        name: "{{ server_name }}"
      with_items: "{{ k8s_hosts['k8s_contr'] }}"
      loop_control:
        loop_var: server_name
      register: new_k8s_contr_result

    - name: Add contr into local inventory
      add_host:
        name: "{{ server_info.openstack.public_v4 }}"
        hostname: "{{ server_info.openstack.name }}"
        group: k8s_contr
      with_items: "{{ new_k8s_contr_result.results | flatten(1) }}"
      loop_control:
        loop_var: server_info

    - name: "Spawning k8s_minion node"
      os_server:
        state: present
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        image: "{{ minion_image }}"
        key_name: "{{ minion_key_name }}"
        timeout: 200
        flavor: "{{ minion_flavor }}"
        nics:
          - net-name: "{{ minion_net_name }}"
        name: "{{ server_name }}"
      with_items: "{{ k8s_hosts['k8s_minion'] }}"
      loop_control:
        loop_var: server_name
      register: new_k8s_minion_result

    - name: Add minions into local inventory
      add_host:
        name: "{{ server_info.openstack.public_v4 }}"
        hostname: "{{ server_info.openstack.name }}"
        group: k8s_minion
      with_items: "{{ new_k8s_minion_result.results | flatten(1) }}"
      loop_control:
        loop_var: server_info

    - when: new_k8s_contr_result.changed
      name: wait for instances k8s_contr to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ item }}"
      with_items: "{{ groups['k8s_contr'] }}"
      run_once: true

    - when: new_k8s_minion_result.changed
      name: wait for instances k8s_minion to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ item }}"
      with_items: "{{ groups['k8s_minion'] }}"
      run_once: true
