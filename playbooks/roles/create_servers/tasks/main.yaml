---
- block:
  - when: vrack_net_name is defined
    name: Check if vrack net-name has been provided
    set_fact:
      nics:
        - net-name: "{{ contr_net_name }}"
        - net-name: "{{ vrack_net_name }}"
      vrack_mapping: []

  - when: vrack_net_name is not defined
    name: vrack network is not defined
    set_fact:
      nics:
        - net-name: "{{ contr_net_name }}"

  - name: "Spawning k8s_contr node"
    os_server:
      state: present
      auth:
        auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
        username: "{{ lookup('env', 'OS_USERNAME') }}"
        password: "{{ lookup('env', 'OS_PASSWORD') }}"
        project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
        user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
        project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
      region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
      image: "{{ contr_image }}"
      key_name: "{{ openstack_keypair_name }}"
      timeout: 200
      flavor: "{{ contr_flavor }}"
      nics: "{{ nics }}"
      name: "{{ server_name }}"
    with_items: "{{ k8s_hosts['k8s_contr'] }}"
    loop_control:
      loop_var: server_name
    register: new_k8s_contr_result

  - name: Add contr into local inventory
    add_host:
      name: "{{ server_info.openstack.public_v4 }}"
      hostname: "{{ server_info.openstack.name }}"
      group: k8s_contr
    with_items: "{{ new_k8s_contr_result.results | flatten(1) }}"
    loop_control:
      loop_var: server_info

  - name: "Spawning k8s_minion node"
    os_server:
      state: present
      auth:
        auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
        username: "{{ lookup('env', 'OS_USERNAME') }}"
        password: "{{ lookup('env', 'OS_PASSWORD') }}"
        project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
        user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
        project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
      region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
      image: "{{ minion_image }}"
      key_name: "{{ openstack_keypair_name }}"
      timeout: 200
      flavor: "{{ minion_flavor }}"
      nics: "{{ nics }}"
      name: "{{ server_name }}"
    with_items: "{{ k8s_hosts['k8s_minion'] }}"
    loop_control:
      loop_var: server_name
    register: new_k8s_minion_result

  - name: Add minions into local inventory
    add_host:
      name: "{{ server_info.openstack.public_v4 }}"
      hostname: "{{ server_info.openstack.name }}"
      group: k8s_minion
    with_items: "{{ new_k8s_minion_result.results | flatten(1) }}"
    loop_control:
      loop_var: server_info

  - when: new_k8s_contr_result.changed or new_k8s_minion_result.changed
    name: if the infra is fresh
    set_fact:
      new_infra: true

  - when: new_infra is defined
    block:
    - name: wait for instances k8s_contr to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ item }}"
      with_items: "{{ groups['k8s_contr'] }}"

    - name: wait for instances k8s_minion to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ item }}"
      with_items: "{{ groups['k8s_minion'] }}"

  - when: vrack_net_name is defined
    block:
    - name: Add vrack network as fact - contr nodes
      set_fact:
        vrack_mapping: "{{ vrack_mapping + [name + '=' + addr] }}"
      with_items: "{{ new_k8s_contr_result.results | flatten(1) }}"
      loop_control:
        loop_var: server_info
      vars:
        vrack_addr: 'addresses.vrack[0].addr'
        name: "{{ server_info.openstack.name }}"
        addr: "{{ server_info.openstack | json_query(vrack_addr) }}"

    - name: Add vrack network as fact - minion nodes
      set_fact:
        vrack_mapping: "{{ vrack_mapping + [name + '=' + addr] }}"
      with_items: "{{ new_k8s_minion_result.results | flatten(1) }}"
      loop_control:
        loop_var: server_info
      vars:
        vrack_addr: 'addresses.vrack[0].addr'
        name: "{{ server_info.openstack.name }}"
        addr: "{{ server_info.openstack | json_query(vrack_addr) }}"

    - name: check vrack file
      stat:
        path: "${HOME}/vrack_mapping.txt"
      register: vrack_file
      delegate_to: "{{ item }}"
      delegate_facts: True
      loop: "{{ groups['k8s_contr'] }}"

    # NOTE: I assume, that if one host has this file, all will have it too.
    - when:  not vrack_file.results[0].stat.exists
      name: Create vrack mapping file
      template:
        src: vrack_mapping.txt
        dest: vrack_mapping.txt
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      delegate_to: "{{ item }}"
      delegate_facts: True
      loop: "{{ groups['all'] }}"
