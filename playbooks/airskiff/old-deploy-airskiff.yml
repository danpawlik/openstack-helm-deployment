---
- name: Create servers
  hosts: localhost
  gather_facts: False
  vars:
    flavor: b2-30
    image: "Ubuntu 16.04"
    key_name: ansible_key
    net_name: Ext-Net
  tags:
    - create_servers
  tasks:
    - name: Set OS configuration as fact
      set_fact:
        flavor: "{{ flavor }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        net_name: "{{ net_name }}"
    - name: "Spawning airskiff node"
      os_server:
        state: present
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        image: "{{ image }}"
        key_name: "{{ key_name }}"
        timeout: 200
        flavor: "{{ flavor }}"
        nics:
          - net-name: "{{ net_name }}"
        name: "{{ item }}"
      register: airskiff_result
      with_items:
        - "airskiff-contr-all"

    - name: Add airskiff into local inventory
      add_host:
        name: "{{ airskiff_result.results[0].openstack.public_v4  }}"
        hostname: "{{ airskiff_result.results[0].openstack.name }}"
        group: airskiff

    - name: wait for instances k8s_contr to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ item }}"
      with_items: "{{ groups['airskiff'] }}"
      run_once: true

    - name: Add airskiff host key to known_hosts
      shell: ssh-keyscan -H "{{ item }}" >> /home/ubuntu/.ssh/known_hosts
      with_items: "{{ groups['airskiff'] }}"
      args:
        executable: /bin/bash
      run_once: True


- name: Deploy
  hosts: localhost
  gather_facts: False
  vars:
    ansible_host_key_checking: false
    ansible_ssh_private_key_file: /home/ubuntu/.ssh/id_rsa_ansible
    setup_minikube: true
  tags:
    - deploy
  tasks:
    - name: "Copy upgrade script"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/upgrade-host.sh
        dest: scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ item }}"
      delegate_facts: True
      loop: "{{ groups['airskiff'] }}"

    - name: "Change sudoers"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/change-sudoers.sh
        dest: scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ item }}"
      delegate_facts: True
      loop: "{{ groups['airskiff'] }}"

    - name: "Copy helm serve script - for debuging"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/helm-serve.sh
        dest: scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ item }}"
      delegate_facts: True
      loop: "{{ groups['airskiff'] }}"

    - name: "Copy get pods script"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/get-pods.sh
        dest: scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ item }}"
      delegate_facts: True
      loop: "{{ groups['airskiff'] }}"

    - name: Copy openrc generator
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/set-openrc.sh
        dest: scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ item }}"
      delegate_facts: True
      loop: "{{ groups['airskiff'] }}"

    ###############################################################

- name: Deploy
  hosts:
    - airskiff
  gather_facts: False
  vars:
    ansible_host_key_checking: false
    ansible_ssh_private_key_file: /home/ubuntu/.ssh/id_rsa_ansible
    setup_minikube: true

  tasks:
    - name: check if sudoers is correct
      sudo: yes
      sudo_user: root
      shell: whoami

    - name: remove nano
      sudo: yes
      sudo_user: ubuntu
      shell: sudo apt remove -y nano
      ignore_errors: true

    - name: Upgrade host
      sudo: yes
      sudo_user: ubuntu
      shell: |
        bash scripts/upgrade-host.sh >> logs
      register: upgrade_status
      ignore_errors: yes
      run_once: True

    - name: install other packages
      sudo: yes
      sudo_user: ubuntu
      shell: sudo apt install -y vim htop ccze
      ignore_errors: true

    #################################################################
    #
    ####################### RAMDISK #################################
    #
    #################################################################

    - name: install other packages
      sudo: yes
      sudo_user: ubuntu
      shell: |
        sudo mkdir -p /data
        sudo mount -t tmpfs -o nodev,nosuid,size=512M tmpfs /data
      ignore_errors: true

    ################################################################

    - name: Clone repo
      shell: |
        git clone https://github.com/airshipit/treasuremap.git treasuremap | tee -a logs
      ignore_errors: yes
      run_once: True

    - name: 000-install-packages.sh
      shell: |
        cd treasuremap && \
        ./tools/deployment/airskiff/developer/000-install-packages.sh | tee -a logs
      ignore_errors: yes
      run_once: True

    - name: 005-clone-dependencies.sh
      shell: |
        cd treasuremap && \
        ./tools/deployment/airskiff/developer/005-clone-dependencies.sh | tee -a logs
      ignore_errors: yes
      run_once: true

    ################ WORKAROUNDS ##################
    #
    - name: Cherry-pick shipyard patch
      shell: |
        cd shipyard
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        git fetch https://review.github.com/airshipit/shipyard refs/changes/56/672656/1 && git cherry-pick FETCH_HEAD
      ignore_errors: true

    - name: Remove docker.io name
      shell: |
          find . -type f -exec sed -i -e 's/docker.io/docker.io/g' {} \;
      ignore_errors: yes
      run_once: true

    - name: Switch repo to github
      shell: |
        find . -type f -exec sed -i -e 's/opendev.org\/airship/github.com\/airshipit/g' {} \;
        find . -type f -exec sed -i -e 's/opendev.org\/openstack/github.com\/openstack/g' {} \;
      ignore_errors: yes
      run_once: true

    - name: Disable services that are not required
      shell: |
        sed -i '/openstack-heat/d'  treasuremap/global/software/manifests/full-site.yaml
        sed -i '/openstack-heat/d'  treasuremap/site/airskiff/software/manifests/full-site.yaml
        sed -i 's/openstack-heat: enabled/openstack-heat: disabled/g' treasuremap/site/airskiff/profiles/host/cp_r720.yaml
        sed -i 's/openstack-heat: enabled/openstack-heat: disabled/g' treasuremap/global/profiles/host/cp.yaml
      ignore_errors: true
      run_once: true

    ################################################

    - when: setup_minikube
      name: 010-deploy-k8s.sh
      shell: |
        cd treasuremap && \
        ./tools/deployment/airskiff/developer/010-deploy-k8s.sh | tee -a logs
      ignore_errors: true
      run_once: true

    - when: not setup_minikube
      name: "Copy install-kubernetes script"
      copy:
        src: "{{ ansible_env.HOME }}/openstack-helm-deployment/scripts/install-kubernetes.sh"
        dest: scripts/
        mode: 0755
        group: ubuntu
        owner: ubuntu

    - when: not setup_minikube
      name: Deploy k8s
      shell: |
        bash -x scripts/install-kubernetes.sh | tee -a logs
      ignore_errors: false

    - when: not setup_minikube
      name: Set node labels
      shell: |
        kubectl label nodes --all openstack-control-plane=enabled
        kubectl label nodes --all openstack-compute-node=enabled
        kubectl label nodes --all openvswitch=enabled
        kubectl label nodes --all linuxbridge=enabled
        kubectl label nodes --all ceph-mon=enabled
        kubectl label nodes --all ceph-osd=enabled
        kubectl label nodes --all ceph-mds=enabled
        kubectl label nodes --all ceph-rgw=enabled
        kubectl label nodes --all ceph-mgr=enabled
        # from 010-deploy-k8s.sh
        kubectl label nodes --all --overwrite ucp-control-plane=enabled
      ignore_errors: false

    - when: not setup_minikube
      name: Install NFS common package
      shell: sudo apt install -y nfs-common >> logs 2>&1
      ignore_errors: false

    - name: add bash completion
      sudo: yes
      sudo_user: ubuntu
      shell: |
        echo "source <(kubectl completion bash)" >> .bashrc
        echo "alias k=kubectl" >> .bashrc
        echo "complete -F __start_kubectl k" >> .bashrc
      ignore_errors: yes
      run_once: true

      ################################################

    - name: 020-setup-client.sh
      shell: |
        cd treasuremap && \
        sudo  ./tools/deployment/airskiff/developer/020-setup-client.sh | tee -a logs
      ignore_errors: yes
      run_once: true

    - name: change ownership of airskiff.yaml
      shell: |
        if [ ! -f treasuremap/airskiff.yaml ]; then
          touch treasuremap/airskiff.yaml
        fi
        sudo chmod 0644 treasuremap/airskiff.yaml
      ignore_errors: true

    - name: 030-armada-bootstrap.sh
      shell: |
        cd treasuremap && \
        sudo ./tools/deployment/airskiff/developer/030-armada-bootstrap.sh | tee -a logs
      ignore_errors: yes
      run_once: true

    - name: 100-deploy-osh.sh
      shell: |
        cd treasuremap && \
        sudo  ./tools/deployment/airskiff/developer/100-deploy-osh.sh | tee -a logs
      ignore_errors: yes
      run_once: true

    - name: Setup openrc
      shell: |
        export OS_PASSWORD=$(grep 'password' treasuremap/site/airskiff/secrets/passphrases/osh_keystone_admin_password.yaml | grep data | awk '{print $2}')
        bash scripts/set-openrc.sh
      ignore_errors: yes
      run_once: true
