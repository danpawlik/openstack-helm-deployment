---
- name: Check input group parameters
  hosts: localhost
  gather_facts: False
  tags:
    - server
  vars:
    - k8s_contr: "{{ k8s_contr | default('k8s_contr') }}"
    - k8s_minion: "{{ k8s_minion | default('k8s_minion') }}"
  tasks:
###############################################################################
    - name: "Getting info about k8s_contr if exist"
      os_server_facts:
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        server: "k8s_contr"
      register: k8s_contr_result

    - name: Add Host to inventory  k8s_contr
      add_host:
        name: "{{ item.public_v4 }}"
        group: "{{ item.name }}"
      with_items: "{{ k8s_contr_result.ansible_facts.openstack_servers }}"

    - name: "Getting info about k8s_minion if exist"
      os_server_facts:
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        server: "k8s_minion"
      register: k8s_minion_result

    - name: Add Host to inventory NODE-TWO
      add_host:
        name: "{{ item.public_v4 }}"
        group: "{{ item.name }}"
      with_items: "{{ k8s_minion_result.ansible_facts.openstack_servers }}"

    - name: debug k8s_contr
      debug:
        var: k8s_contr_result

    - name: debug k8s_minion
      debug:
        var: k8s_minion_result

###############################################################################

    - name: "Spawning first node"
      os_server:
        state: present
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        name: k8s_contr
        image: "Ubuntu 18.04"
        key_name: ansible_key
        timeout: 200
        flavor: c2-30
        nics:
          - net-name: Ext-Net
      when: k8s_contr_result['ansible_facts']['openstack_servers'] == []
      register: new_k8s_contr_result

    - name: debug new_k8s_contr
      debug:
        var: new_k8s_contr_result
      when: openstack_servers != ""

    - when: (new_k8s_contr_result | success) and (k8s_contr_result['ansible_facts']['openstack_servers'] == [])
      name: Add Host to inventory k8s_contr when vm has been spawned
      add_host:
        name: "{{ new_k8s_contr_result.server.public_v4 }}"
        group: "{{ new_k8s_contr_result.server.name }}"
      ignore_errors: yes

    - name: "Spawning second node"
      os_server:
        state: present
        auth:
          auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
          username: "{{ lookup('env', 'OS_USERNAME') }}"
          password: "{{ lookup('env', 'OS_PASSWORD') }}"
          project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
          user_domain_name: "{{ lookup('env', 'OS_USER_DOMAIN_NAME') }}"
          project_domain_name: "{{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }}"
        region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
        name: k8s_minion
        image: "Ubuntu 18.04"
        key_name: ansible_key
        timeout: 200
        flavor: c2-30
        nics:
          - net-name: Ext-Net
      when: k8s_minion_result['ansible_facts']['openstack_servers'] == []
      register: new_k8s_minion_result

    - name: debug new_k8s_minion
      debug:
        var: new_k8s_minion_result
      when: openstack_servers != ""

    - when: (new_k8s_minion_result | success) and (k8s_minion_result['ansible_facts']['openstack_servers'] == [])
      name: Add Host to inventory NODE-TWO when vm has been spawned
      add_host:
        name: "{{ new_k8s_minion_result.server.public_v4 }}"
        group: "{{ new_k8s_minion_result.server.name }}"
      ignore_errors: yes

    - when: (new_k8s_contr_result | success) and (k8s_contr_result['ansible_facts']['openstack_servers'] == [])
      name: wait for instances k8s_contr to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ new_k8s_contr_result.server.public_v4 }}"

    - when: (new_k8s_minion_result | success) and (k8s_minion_result['ansible_facts']['openstack_servers'] == [])
      name: wait for instances k8s_minion to be ready
      wait_for:
        port: 22
        delay: 5
        timeout: 150
        host: "{{ new_k8s_minion_result.server.public_v4 }}"

##############################################################################

- name: Generate SSH key and add hosts to known hosts
  hosts: localhost
  tasks:
    - name: Generate SSH key used by ansible
      user:
        name: ubuntu
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa_ansible
      delegate_to: localhost
      run_once: True

    - name: Add k8s_contr host key to known_hosts
      shell: ssh-keyscan -H "{{ groups['k8s_contr'][0] }}" >> /root/.ssh/known_hosts
      ignore_errors: yes

    - name: Add k8s_minion host key to known_hosts
      shell: ssh-keyscan -H "{{ groups['k8s_minion'][0] }}" >> /root/.ssh/known_hosts
      ignore_errors: yes

###############################################################################

- name: Prepare hosts
  hosts:
    - "{{ k8s_contr | default('k8s_contr') }}"
    - "{{ k8s_minion | default('k8s_minion') }}"
  gather_facts: no
  remote_user: ubuntu
  become: True
  vars:
    ansible_host_key_checking: false
  tasks:
    - set_fact: k8s_contr={{ groups['k8s_contr'][0] }}
    - set_fact: k8s_minion={{ groups['k8s_minion'][0] }}

    - name: Get k8s_contr
      debug:
        var: k8s_contr

    - name: Get k8s_minion
      debug:
        var: k8s_minion

    - name: "Install private key on k8s_contr"
      copy:
        src: /home/ubuntu/.ssh/id_rsa_ansible
        dest: /home/ubuntu/.ssh/id_rsa
        mode: 0600
        group: ubuntu
        owner: ubuntu
      delegate_to: "{{ k8s_contr }}"

    - name: "Install public key on all hosts"
      copy:
        src: /home/ubuntu/.ssh/id_rsa_ansible.pub
        dest: /home/ubuntu/.ssh/id_rsa.pub
        mode: 0600
        group: ubuntu
        owner: ubuntu

    - name: "Install public key on k8s_minion"
      authorized_key:
        user: ubuntu
        state: present
        key: "{{ lookup('file', '/home/ubuntu/.ssh/id_rsa_ansible.pub') }}"
      delegate_to: "{{ k8s_minion }}"
      run_once: True

    - name: "Accept traffic from k8s_contr on NODE-TWO host"
      iptables:
        chain: INPUT
        protocol: tcp
        source: "{{ k8s_contr }}"
        destination_port: 22
        jump: ACCEPT
        action: insert
      delegate_to: "{{ k8s_minion }}"
      run_once: True

    - name: Accept SSH key between k8s_contr and own self
      shell: ssh-keyscan -H "{{ k8s_contr }}" >> /home/ubuntu/.ssh/known_hosts
      ignore_errors: yes
      delegate_to: "{{ k8s_contr }}"

    - name: Accept SSH key between k8s_minion and k8s_contr
      shell: ssh-keyscan -H "{{ k8s_minion }}" >> /home/ubuntu/.ssh/known_hosts
      ignore_errors: yes
      delegate_to: "{{ k8s_contr }}"

      # Do we need that?
    - name: Accept SSH key self k8s_contr
      shell: cat /home/ubuntu/.ssh/id_rsa.pub >> /home/ubuntu/.ssh/authorized_keys
      ignore_errors: yes
      delegate_to: "{{ k8s_contr }}"

    - name: "Ensure SSH connectivity between k8s_contr and k8s_minion"
      command: >
          ssh -oBatchMode=yes -i /home/ubuntu/.ssh/id_rsa -oStrictHostKeyChecking=no "ubuntu@{{ k8s_minion }}" uptime
      register: result
      until: result|success
      retries: 5
      delay: 10
      delegate_to: "{{ k8s_contr }}"
      run_once: True

    - name: "Copy script to all nodes"
      copy:
        src: /home/ubuntu/openstack-helm-deployment/scripts/
        dest: /home/ubuntu/
        mode: 0755
        group: ubuntu
        owner: ubuntu

      # install docker on all hosts
    - name: Get docker
      shell: curl -sSL https://get.docker.com/ | sh
      run_once: True

    - name: Get docker
      shell: sudo usermod -aG docker ubuntu
      run_once: True


- name: Run script on k8s_minions
  hosts:
    - "{{ k8s_minion | default('k8s_minion') }}"
  gather_facts: no
  remote_user: ubuntu
  become: True
  vars:
    ansible_host_key_checking: false
  tasks:
    - set_fact: k8s_minion={{ groups['k8s_minion'][0] }}
    - name: Run scripts on k8s_minion
      sudo: yes
      sudo_user: ubuntu
      shell: /home/ubuntu/setup-new-host.sh > /home/ubuntu/logs
      args:
        executable: /bin/bash
      delegate_to: "{{ k8s_minion }}"
      register: current_status
      failed_when: current_status.rc == 1


- name: Run script on k8s_controller
  hosts:
    - "{{ k8s_contr | default('k8s_contr') }}"
    - "{{ k8s_minion | default('k8s_minion') }}"
  gather_facts: no
  remote_user: ubuntu
  become: True
  vars:
    ansible_host_key_checking: false
  tasks:
    - set_fact: k8s_contr={{ groups['k8s_contr'][0] }}
    - set_fact: k8s_minion={{ groups['k8s_minion'][0] }}
    - name: Run scripts on k8s_contr
      become: true
      become_user: ubuntu
      shell: sudo -H -u ubuntu bash -c 'export ANSIBLE_LOG_PATH=/home/ubuntu/ansible.logs ; /home/ubuntu/setup-controller.sh "{{ k8s_minion }}" > /home/ubuntu/logs'
      args:
        executable: /bin/bash
        warn: yes
      environment:
        ANSIBLE_LOG_PATH: /home/ubuntu/ansible.logs
      delegate_to: "{{ k8s_contr }}"
      ignore_errors: yes
      register: result
      failed_when: result.rc == 1
